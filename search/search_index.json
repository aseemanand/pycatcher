{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pycatcher","title":"PyCatcher","text":""},{"location":"#outlier-detection-for-time-series-data","title":"Outlier Detection for Time-series Data","text":"<p>This package identifies outlier(s) for a given time-series dataset in simple steps. It supports day, week, month and  quarter level time-series data.</p> <ul> <li>Highlights</li> <li>Outlier Detection Functions</li> <li>Diagnostic Functions</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pycatcher\n</code></pre>"},{"location":"#dataframe-arguments","title":"DataFrame Arguments","text":"<ul> <li>First column in the dataframe must be a date column ('YYYY-MM-DD') and the last column a numeric column  (sum or total count for the time period) to detect outliers using Seasonal Decomposition algorithms.</li> <li>Last column must be a numeric column to detect outliers using Moving Average and Z-score algorithm. </li> </ul>"},{"location":"#summary-of-features","title":"Summary of features","text":"<p>PyCatcher provides an efficient solution for detecting anomalies in time-series data using various statistical methods. Below are the available techniques for anomaly detection, each optimized for different data characteristics.</p>"},{"location":"#1-seasonal-decomposition-based-anomaly-detection","title":"1. Seasonal-Decomposition Based Anomaly Detection","text":"<p>Seasonal decomposition algorithms (Classical; STL; MSTL) requires at least 2 years of data, otherwise we  can use simpler methods (Inter Quartile Range (IQR); Moving Average method) to detect outliers.</p>"},{"location":"#detect-outliers-using-classical-seasonal-decomposition","title":"Detect Outliers Using Classical Seasonal Decomposition","text":"<p>For datasets with at least two years of data, PyCatcher automatically determines whether the data follows  an additive or multiplicative model to detect anomalies.</p> <ul> <li>Method: <code>detect_outliers_classic(df)</code></li> <li>Output: DataFrame of detected anomalies or a message indicating no anomalies.</li> </ul>"},{"location":"#detect-todays-outliers","title":"Detect Today's Outliers","text":"<p>Quickly identify if there are any anomalies specifically for the current date.</p> <ul> <li>Method: <code>detect_outliers_today_classic(df)</code></li> <li>Output: Anomaly details for today or a message indicating no outliers.</li> </ul>"},{"location":"#detect-the-latest-anomalies","title":"Detect the Latest Anomalies","text":"<p>Retrieve the most recent anomalies identified in your time-series data.</p> <ul> <li>Method: <code>detect_outliers_latest_classic(df)</code></li> <li>Output: Details of the latest detected anomalies.</li> </ul>"},{"location":"#visualize-outliers-with-seasonal-decomposition","title":"Visualize Outliers with Seasonal Decomposition","text":"<p>Show outliers in your data through classical seasonal decomposition.</p> <ul> <li>Method: <code>build_outliers_plot_classic(df)</code></li> <li>Output: Outlier plot generated using classical seasonal decomposition.</li> </ul>"},{"location":"#visualize-seasonal-decomposition","title":"Visualize Seasonal Decomposition","text":"<p>Understand seasonality in your data by visualizing classical seasonal decomposition.</p> <ul> <li>Method: <code>build_seasonal_plot_classic(df)</code></li> <li>Output: Seasonal plots displaying additive or multiplicative trends.</li> </ul>"},{"location":"#visualize-monthly-patterns","title":"Visualize Monthly Patterns","text":"<p>Show month-wise box plot </p> <ul> <li>Method: <code>build_monthwise_plot(df)</code></li> <li>Output: Month-wise box plots showing spread and skewness of data.</li> </ul>"},{"location":"#detect-outliers-using-seasonal-trend-decomposition-using-loess-stl","title":"Detect Outliers Using Seasonal-Trend Decomposition using LOESS (STL)","text":"<p>Use the Seasonal-Trend Decomposition method (STL) to detect anomalies.</p> <ul> <li>Method: <code>detect_outliers_stl(df)</code></li> <li>Output: Rows flagged as outliers using STL.</li> </ul>"},{"location":"#detect-todays-outliers_1","title":"Detect Today's Outliers","text":"<p>Quickly identify if there are any anomalies specifically for the current date.</p> <ul> <li>Method: <code>detect_outliers_today_stl(df)</code></li> <li>Output: Anomaly details for today or a message indicating no outliers.</li> </ul>"},{"location":"#detect-the-latest-anomalies_1","title":"Detect the Latest Anomalies","text":"<p>Retrieve the most recent anomalies identified in your time-series data.</p> <ul> <li>Method: <code>detect_outliers_latest_stl(df)</code></li> <li>Output: Details of the latest detected anomalies.</li> </ul>"},{"location":"#visualize-stl-outliers","title":"Visualize STL Outliers","text":"<p>Show outliers using the Seasonal-Trend Decomposition using LOESS (STL).</p> <ul> <li>Method: <code>build_outliers_plot_stl(df)</code></li> <li>Output: Outlier plot generated using STL.</li> </ul>"},{"location":"#visualize-seasonal-decomposition-using-stl","title":"Visualize Seasonal Decomposition using STL","text":"<p>Understand seasonality in your data by visualizing Seasonal-Trend Decomposition using LOESS (STL).</p> <ul> <li>Method: <code>build_seasonal_plot_stl(df)</code></li> <li>Output: Seasonal plot to decompose a time series into a trend component, seasonal components,  and a residual component.</li> </ul>"},{"location":"#detect-outliers-using-multiple-seasonal-trend-decomposition-using-loess-mstl","title":"Detect Outliers Using Multiple Seasonal-Trend decomposition using LOESS (MSTL)","text":"<p>Use the Multiple Seasonal-Trend Decomposition method (MSTL) to detect anomalies. </p> <ul> <li>Method: <code>detect_outliers_mstl(df)</code></li> <li>Output: Rows flagged as outliers using MSTL.</li> </ul>"},{"location":"#detect-todays-outliers_2","title":"Detect Today's Outliers","text":"<p>Quickly identify if there are any anomalies specifically for the current date.</p> <ul> <li>Method: <code>detect_outliers_today_mstl(df)</code></li> <li>Output: Anomaly details for today or a message indicating no outliers.</li> </ul>"},{"location":"#detect-the-latest-anomalies_2","title":"Detect the Latest Anomalies","text":"<p>Retrieve the most recent anomalies identified in your time-series data.</p> <ul> <li>Method: <code>detect_outliers_latest_mstl(df)</code></li> <li>Output: Details of the latest detected anomalies.</li> </ul>"},{"location":"#visualize-mstl-outliers","title":"Visualize MSTL Outliers","text":"<p>Show outliers using the Multiple Seasonal-Trend Decomposition using LOESS (MSTL).</p> <ul> <li>Method: <code>build_outliers_plot_mstl(df)</code></li> <li>Output: Outlier plot generated using MSTL.</li> </ul>"},{"location":"#visualize-multiple-seasonal-decomposition","title":"Visualize Multiple Seasonal Decomposition","text":"<p>Understand seasonality in your data by visualizing Multiple Seasonal-Trend Decomposition using LOESS (MSTL).</p> <ul> <li>Method: <code>build_seasonal_plot_mstl(df)</code></li> <li>Output: Seasonal plot to decompose a time series into a trend component, multiple seasonal components,  and a residual component.</li> </ul>"},{"location":"#2-detect-outliers-using-moving-average","title":"2. Detect Outliers Using Moving Average","text":"<p>Detect anomalies in time-series data using the Moving Average method.</p> <ul> <li>Method: <code>detect_outliers_moving_average(df)</code></li> <li>Output: Rows flagged as outliers using Moving Average and Z-score algorithm.</li> </ul>"},{"location":"#visualize-moving-average-outliers","title":"Visualize Moving Average Outliers","text":"<p>Show outliers using the Moving Average and Z-score algorithm.</p> <ul> <li>Method: <code>build_moving_average_outliers_plot(df)</code></li> <li>Output: Outlier plot generated using Moving Average method.</li> </ul>"},{"location":"#3-iqr-based-anomaly-detection","title":"3. IQR-Based Anomaly Detection","text":""},{"location":"#detect-outliers-using-interquartile-range-iqr","title":"Detect Outliers Using Interquartile Range (IQR)","text":"<p>For datasets spanning less than two years, the IQR method is employed.</p> <ul> <li>Method: <code>find_outliers_iqr(df)</code></li> <li>Output: Rows flagged as outliers based on IQR.</li> </ul>"},{"location":"#visualize-iqr-plot","title":"Visualize IQR Plot","text":"<p>Build an IQR plot for a given dataframe (for less than 2 years of data).</p> <ul> <li>Method: <code>build_iqr_plot(df)</code></li> <li>Output: IQR plot for the time-series data.</li> </ul>"},{"location":"#example-usage","title":"Example Usage","text":"<p>To see an example of how to use the <code>pycatcher</code> package for outlier detection in time-series data, check out the Example Notebook.</p> <p>The notebook provides step-by-step guidance and demonstrates the key features of the library.</p>"},{"location":"diagnostic_functions/","title":"Diagnostic Functions","text":""},{"location":"diagnostic_functions/#summary-of-diagnostic-functions","title":"Summary of Diagnostic Functions","text":"<ul> <li><code>build_outliers_plot_classic(df):</code> Show outliers using Classical Seasonal Decomposition algorithm.</li> <li><code>build_seasonal_plot_classic(df):</code> Build seasonal plot using Classical Seasonal Decomposition algorithm.</li> <li><code>build_outliers_plot_stl(df):</code> Show outliers using Seasonal-Trend Decomposition using LOESS (STL) algorithm.</li> <li><code>build_seasonal_plot_stl(df):</code> Build seasonal plots using STL for a given dataframe.</li> <li><code>build_outliers_plot_mstl(df):</code> Show outliers using Multiple Seasonal-Trend Decomposition using LOESS (MSTL) algorithm.</li> <li><code>build_seasonal_plot_mstl(df):</code> Build multiple seasonal plots using MSTL for a given dataframe.</li> <li><code>build_moving_average_outliers_plot(df):</code> Show outliers using Moving Average and Z-score algorithm.</li> <li><code>build_iqr_plot(df):</code> Build IQR plot for a given dataframe (for less than 2 years of data).</li> <li><code>build_monthwise_plot(df):</code> Build month-wise plot for a given dataframe.</li> <li><code>build_decomposition_results(df):</code> Get seasonal decomposition results for a given dataframe.</li> <li><code>conduct_stationarity_check(df):</code> Conduct stationarity checks for a feature (dataframe's count column).</li> </ul>"},{"location":"highlights/","title":"Highlights","text":"<p>Unlike many open-source packages for outlier detection, PyCatcher provides several distinctive features:</p> <ul> <li> <p>Automatic Model Selection:  PyCatcher automatically detects whether to use an additive or multiplicative decomposition model, ensuring the most accurate detection of outliers based on the characteristics of your data.</p> </li> <li> <p>Dynamic Method Selection Based on Data Size: PyCatcher seamlessly switches between Seasonal Trend Decomposition (for datasets spanning at least two years) and Inter Quartile Range (IQR) for shorter time periods, offering flexibility without manual intervention.</p> </li> <li> <p>Wide Time Frequency Support: Supports multiple time-series frequencies \u2014 including daily, weekly, monthly, and quarterly data\u2014without requiring  users to pre-process or adjust their datasets.</p> </li> <li> <p>Choice of Different Seasonal Trend Algorithms:  Support for outlier detection using various Seasonal Trend  Decomposition algorithms (Classical; STL; MSTL).</p> </li> <li> <p>Adaptation for Changing Seasonality : Multiple Seasonal-Trend decomposition using Loess (MSTL) can model seasonality which changes with time. </p> </li> <li> <p>Integrated Diagnostics: PyCatcher includes comprehensive diagnostic tools, enabling users to visualize outliers,  trends and seasonal patterns, evaluate data stationarity, and analyze decomposition results.</p> </li> <li> <p>User Interface: Availability of a simple user interface for the users to upload file for outlier detection using IQR.</p> </li> </ul>"},{"location":"outlier_detection_functions/","title":"Outlier Detection Functions","text":""},{"location":"outlier_detection_functions/#summary-of-package-functions","title":"Summary of Package Functions","text":"<ul> <li><code>detect_outliers_classic(df):</code> Detect outliers in a time-series dataframe using Classical Seasonal Decomposition. </li> <li><code>detect_outliers_today_classic(df):</code> Detect outliers for the current date using Classical Seasonal Decomposition.</li> <li><code>detect_outliers_latest_classic(df):</code> Detect latest outliers using Classical Seasonal Decomposition.</li> <li><code>detect_outliers_stl(df):</code> Detect outliers using Seasonal-Trend Decomposition using LOESS (STL).</li> <li><code>detect_outliers_today_stl(df):</code> Detect outliers for the current date using STL.</li> <li><code>detect_outliers_latest_stl(df):</code> Detect latest outliers using STL.</li> <li><code>detect_outliers_mstl(df):</code> Detect outliers using Multiple Seasonal-Trend Decomposition using LOESS (MSTL).</li> <li><code>detect_outliers_today_mstl(df):</code> Detect outliers for the current date using MSTL.</li> <li><code>detect_outliers_latest_mstl(df):</code> Detect latest outliers using MSTL.</li> <li><code>detect_outliers_iqr(df):</code> Detect outliers in a time-series dataframe when there's less than 2 years of data.</li> <li><code>detect_outliers_moving_average(df):</code> Detect outliers using Moving Average method. </li> </ul>"}]}